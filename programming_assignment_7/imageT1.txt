#include <stdio.h> 
#include <stdlib.h> //for exit() 
#include <string.h> //for strcmp function

char inv(int x, char array[x][x]);
char flip(int x, char array[x][x], char dir);
char redeye(int x, char array[x][x]);

int main(int argc, char *argv[]) {
    int rowCol, i, j;
    char currChar;
    scanf("%d", &rowCol);
    if (rowCol < 1){
        exit(1);
    }。
    currChar = getchar(); 
    currChar = getchar(); 
    char twoDArray[rowCol][rowCol];
    for (i = 0; i < rowCol; i++){
        for (j = 0; j < rowCol; j++){
            twoDArray[i][j] = currChar;
            currChar = getchar();
        }
        currChar = getchar();
    }
    //Throw error if any other char except space (' ') and asterick (*)
    //is in the 2D array
    for (i = 0; i < rowCol; i++){
        for (j = 0; j < rowCol; j++){
            if (twoDArray[i][j] != ' ' && twoDArray[i][j] != '*'){
                exit(1);
            } else {
                continue;
            } 
        }
    }
    //command line arguments to modify the 2D array
    for (i = 1; i < argc; i++){
        if (strcmp(argv[i], "flip") == 0){
            if(i + 1 >= argc) {
                exit(2);
            }
            if ((strcmp(argv[i+1], "v") != 0) && (strcmp(argv[i+1], "V") != 0) &&
                (strcmp(argv[i+1], "h") != 0) && (strcmp(argv[i+1], "H") != 0)){
                exit(2);
            }
            flip(rowCol, twoDArray, argv[i+1][0]);
            i++;
        } else if (strcmp(argv[i], "inv") == 0){
            inv(rowCol, twoDArray);
        } else if (strcmp(argv[i], "redeye") == 0){
            redeye(rowCol, twoDArray);
        } else {
            exit(2);
        }
    }
    for (i = 0; i < rowCol; i++){
        for (j = 0; j < rowCol; j++){
           printf("%c", twoDArray[i][j]); 
        } 
        printf("\n");
    }
}


char inv(int x, char array[x][x]){
    int i, j;
    for (i = 0; i < x; i++){
        for (j = 0; j < x; j++){
            if (array[i][j]!= '*' && array[i][j] != ' '){
                exit(1);
            } else if (array[i][j] == '*'){
                array[i][j] = ' ';
            } else if (array[i][j] == ' '){
                array[i][j] = '*';
            }
        }
    }
    return array[x][x];
}

char flip(int x, char array[x][x], char dir){
    char temp, i, j;
    if (dir == 'v' || dir == 'V'){
        for (i = 0; i < x; i++){
            for (j = 0; j < (x/2); j++){
                temp = array[i][j];
                array[i][j] = array[i][x - (j+1)];
                array[i][x - (j+1)] = temp;
            }
        }
    }
    if (dir == 'h'|| dir == 'H'){
        for (i = 0; i < (x/2); i++){
            for (j = 0; j < x; j++){
                temp = array[i][j]; 
                array[i][j] = array[x - (i+1)][j];
                array[x - (i+1)][j] = temp;
            }
        }
    }   
    return array[x][x];
}

char redeye(int x, char array[x][x]){
   int i, j;
    for (i = 0; i < x; i++){
        for (j = 0; j < x; j++){
            if ((i+1 < x) && (array[i+1][j] != ' ')){
                continue;
            }
            if ((i-1 >= 0) && (array[i-1][j] != ' ')){
                continue;
            }
            if ((j+1 < x) && (array[i][j+1] != ' ')){
                continue;
            }
            if ((j-1 >= 0) && (array[i][j-1] != ' ')){
                continue;
            }
            if ((i+1 < x) && (j+1 < x) && (array[i+1][j+1] != ' ')){
                continue;
            }
            if ((i-1 >= 0) && (j+1 < x) && (array[i-1][j+1] != ' ')){
                continue;
            }
            if ((i+1 < x) && (j-1 >= 0) && (array[i+1][j-1] != ' ')){
                continue;
            }
            if ((i-1 >= 0) && (j-1 >= 0) && (array[i-1][j-1] != ' ')){
                continue;
            }
            array[i][j]= ' ';
        }
    }
    return array[x][x];
}
//*****************************************
int strcmp(char *a, char *b){
    while(*a != '\0' && *b != '\0'){
        if(*a < *b){
            return -1;
        }else if(*a > *b){
            return 1;
        }else{
            a++;
            b++;
        }
    }
    if(*a == '\0' && *b == '\0'){
        return 0;
    }
    if(*a == '\0'){
        return -1;
    }
    if(*b == '\0'){
        return 1;
    }
}


